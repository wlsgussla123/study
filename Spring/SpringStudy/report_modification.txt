제어의 역전. 스프링은 DI/IoC 기술로 구성된 프레임워크라고 할 수 있다.
제어의 역전은 상당히 중요한 개념인데, object는 자신이 사용할 object를 스스로 생성/선택하지 않는다.
심지어, 자신이 어떻게 만들어지고 어디서 사용되는지를 알 수 없다. 모든 제어권한을 다른 대상에 위임하기 때문이다.
스프링에서는 이것은 annotaion이나 xml을 이용해서 편리하게 사용할 수 있지만, 이것이 스프링 자체의 권한은 아니다.
IoC는 유명한 객체지향을 위한 프로그래밍 방식이다. 따라서 스프링을 제대로 공부한다는 것은 객체지향을 이해하는 공부를 하는 것이다.

이미, IoC에 대한 코드를 작성한 경험이 있다.
추상메서드 관련은 커밋을 하지 않아서, 기록이 남지는 않았지만 기억나는 것을 적어보겠다.

먼저, UserDao의 getConnection 부분을 abstract로 선언한 뒤, 서브 클래스들이 이것을 구현하는 것이었다.
하지만 서브 클래스는 구현은 하였지만 이 getConnection()이 언제 사용되는지 모른다. 단지 DB 커넥션을
만든다는 기능을 구현해놓으면, 슈퍼 클래스인 UserDao의 템플릿 메서드인 add(), get() 등에서 필요할 때
호출해서 사용하는 것이다.

-> 제어권을 상위 템플릿 메서드에 넘기고 자신은 필요할 때 호출되어 사용된다는 의미!

심지어 UserDao와 DaoFactory에도 IoC가 적용되어 있다.
UserDao는 원래 ConnectionMaker 구현 클래스를 결정하고 오브젝트를 생성하는 권한을 갖고 있었으나,
DaoFactory에게 ConnectionMaekr 구현 클래스에 대한 권한을 넘기고, UserDao 본인 조차도 DaoFactory에서
생성되고 자신이 사용할 object도 DaoFactory에서 공급해주니 UserDao는 완전히 수동적이게 된 것이다.