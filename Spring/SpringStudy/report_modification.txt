앞서, 인터페이스를 이용하여 클래스 사이에 느슨한 연결고리를 만들어주었고, N사와 D사가 인터페이스를 활용하여 기능을 확장하는 형태로 구현을 하였다.
그러나 UserDao에는 어떤 COnnectionMaker 구현 클래스를 사용할지 결정하는 new DConnectionMaker()라는 코드가 존재한다. 
이 관심사를 담은 코드를 UserDao에서 분리하지 않으면 UserDao는 독립적으로 확장 가능한 클래스가 될 수 없다.

어떻게 분리할 것인가?
-> UserDao를 사용하는 클라이언트(object)가 자신이 사용할 ConnectionMaker의 오브젝트를 전달하여 UserDao가 사용하도록 만들어보자.
->-> 결국, UserDao에는 ConnectionMaker의 구체적인 구현 클래스 이름인 DConnectionMaker나 NConnectionMaker 코드가 사라질 것.
->->-> 또한 생성자 타입으로 인터페이스를 받는다. 즉, 다형성을 이용하여 인터페이스를 구현하는 오브젝트라면 구애받지 않고 파라미터로 넘길 수 있는 것.

** 중요한 것은 이전의 connectionMaker = new DConnectionMaker()는 구현 클래스의 오브젝트 간 관계를 맺는 책임을 담당하는 코드였는데, 이것을 UserDao의 클라이언트에 넘겼다는 것.
-> 위의 반복이지만, 클라이언트가 자신이 사용할 오브젝트를 전달하는 것이 핵심!