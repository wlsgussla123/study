앞서, DB Connection이라는 중복된 코드를 메서드로 분리하였다.
생각을 해보면, 관심사가 두 가지로 나뉘어지는데, DB Connection 부분은 연결 부분과 관련된 부분이고, 다른 부분은 데이터 액세스 로직을 어떻게 만들 것인가이다.

이렇게 관심사가 분리된다면, 서로 독립적으로 유지되어 영향을 미치지 않게 코드를 작성하는게 코드를 확장 가능한 형태로 만들 수 있다. (변하지 않는 소프트웨어는 존재하지 않는다.)

추상 메서드를 사용하여 UserDao를 NUserDao와 DUserDao가 상속받고, DBConnection 부분을 자신이 정의한 DBConnection으로 확장할 수 있는 형태로 제공할 수도 있다.
그리고 더 화끈하게 관심사와 변화의 성격이 다른 이 두 가지 코드를 분리할 수 있는데, 이는 바로 DB 커넥션 관련 부분을 아예 별도의 클래스에 담는 것이다.

-> 단, UserDao가 DBConnection 클래스인 ConnectionMaker 클래스에 종속되어지면 안 된다. 종속이 된다면, DUserDao와 NUserDao에서 DBConnection 코드를 
자신의 코드에 맞춰서 개발할 수 없기 때문이다. (확장 불가)

->-> 이것에 대한 해결책으로 두 클래스 사이에 추상적인 느슨한 연결고리를 만들어 준다. : 이것이 인터페이스 !
